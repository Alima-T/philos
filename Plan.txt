План решения задачи:
Каждый философ - отдельный поток
Между каждой парой философов одна вилка (мьютекс)
Основной цикл жизни философа:
Думает
Берет вилки (блокирует мьютексы)
Ест
Кладет вилки (разблокирует мьютексы)
Спит
Для предотвращения взаимоблокировки:
Четные философы берут сначала правую вилку
Нечетные философы берут сначала левую вилку
Каждое действие записывается с временной меткой
Смерть философа должна быть обнаружена не позднее 10 мс

Основные особенности программы:
Каждый философ - отдельный поток
Синхронизация через мьютексы:
Для каждой вилки
Для вывода сообщений
Для проверки смерти
Предотвращение дедлоков:
Четные философы начинают с задержкой
Проверка смерти перед каждым действием
Точное измерение времени через get_time()
5. Умная задержка с проверкой состояния
Корректное освобождение ресурсов

subject
You have to write a program for the mandatory part and another one for the bonus part
(if you decide to do the bonus part). They both have to comply with the following rules:
•Global variables are forbidden!
•Your(s) program(s) should take the following arguments:
number_of_philosophers time_to_die time_to_eat time_to_sleep
[number_of_times_each_philosopher_must_eat]
◦number_of_philosophers: The number of philosophers and also the number
of forks.
◦time_to_die (in milliseconds): If a philosopher didn’t start eating time_to_die
milliseconds since the beginning of their last meal or the beginning of the sim-
ulation, they die.
◦time_to_eat (in milliseconds): The time it takes for a philosopher to eat.
During that time, they will need to hold two forks.
◦time_to_sleep (in milliseconds): The time a philosopher will spend sleeping.
◦number_of_times_each_philosopher_must_eat (optional argument): If all
philosophers have eaten at least number_of_times_each_philosopher_must_eat
times, the simulation stops. If not specified, the simulation stops when a
philosopher dies.
•Each philosopher has a number ranging from 1 to number_of_philosophers.
•Philosopher number 1 sits next to philosopher number number_of_philosophers.
Any other philosopher number N sits between philosopher number N - 1 and philoso-
pher number N + 1.
About the logs of your program:
•Any state change of a philosopher must be formatted as follows:
◦timestamp_in_ms X has taken a fork
◦timestamp_in_ms X is eating
◦timestamp_in_ms X is sleeping
◦timestamp_in_ms X is thinking
◦timestamp_in_ms X died
Replace timestamp_in_ms with the current timestamp in milliseconds
and X with the philosopher number.
•A displayed state message should not be mixed up with another message.
•A message announcing a philosopher died should be displayed no more than 10 ms
after the actual death of the philosopher.
•Again, philosophers should avoid dying!
Your program must not have any data races.

Program name: philo
Turn in files:  Makefile, *.h, *.c, in directory philo/
Makefile : NAME, all, clean, fclean, re
Arguments : number_of_philosophers time_to_die time_to_eat
time_to_sleep
[number_of_times_each_philosopher_must_eat]
External functions: memset, printf, malloc, free, write,
usleep, gettimeofday, pthread_create,
pthread_detach, pthread_join, pthread_mutex_init,
pthread_mutex_destroy, pthread_mutex_lock,
pthread_mutex_unlock
Libft authorized No
Description: Philosophers with threads and mutexes
The specific rules for the mandatory part are:
•Each philosopher should be a thread.
•There is one fork between each pair of philosophers. Therefore, if there are several
philosophers, each philosopher has a fork on their left side and a fork on their right
side. If there is only one philosopher, there should be only one fork on the table.
•To prevent philosophers from duplicating forks, you should protect the forks state
with a mutex for each of them.




Основные компоненты проекта
1. Структуры данных:
t_simulation_data: Эта структура хранит глобальные параметры симуляции, такие как количество философов, время до смерти, время на еду и сон, а также количество необходимых приемов пищи. Она также содержит мьютекс для синхронизации вывода в консоль.
t_philosopher: Эта структура представляет отдельного философа. Она содержит уникальный идентификатор философа, количество съеденных блюд, уровень насыщения и время последнего приема пищи. Также в структуре есть указатели на мьютексы для левой и правой вилок, которые философ использует для еды.
2. Функции:
argv_processing: Обрабатывает аргументы командной строки, переданные программе, и инициализирует данные симуляции.
philosophers: Основная функция, которая запускает симуляцию философов.
philo_creator: Создает философов и инициализирует их данные.
philo_starter: Запускает потоки для каждого философа.
phls_life: Функция, представляющая жизнь философа, где он будет чередовать состояния (еда, сон, размышления).
philo_takes_forks: Управляет захватом вилок философом.
philo_eating: Определяет поведение философа во время еды.
philo_sleeping: Определяет поведение философа во время сна.
eating_or_sleeping: Функция для управления временем, проведенным в состоянии еды или сна.
philo_checker: Проверяет состояние философа (например, не умер ли он).
mutex_destroyer: Освобождает ресурсы мьютексов после завершения симуляции.
life_checker: Проверяет состояние жизни философов.
satiety_checker: Проверяет, удовлетворен ли философ.
Проблема "Ужинающих философов":
В этой задаче несколько философов сидят за столом, и между ними находятся вилки. Каждый философ может либо думать, либо есть. Чтобы поесть, философу нужны обе вилки (левая и правая). Проблема заключается в том, как организовать доступ к вилкам, чтобы избежать взаимной блокировки (deadlock) и обеспечить, чтобы все философы могли поесть.
Заключение
Проект, вероятно, реализует симуляцию, в которой философы поочередно берут вилки, едят, спят и размышляют, при этом соблюдая правила синхронизации, чтобы избежать конфликтов при доступе к общим ресурсам. Это хороший пример использования многопоточности и синхронизации в C.
напиши последователност написания проекта в соответствии с етим кодом без изменениа кода

Вот последовательность написания проекта, основанная на представленном коде, без изменения самого кода:
1. Определение требований
Понять задачу: реализовать симуляцию проблемы "Ужинающих философов".
Определить, какие параметры необходимы для симуляции (количество философов, время на еду, время на сон и т.д.).
2. Проектирование структуры данных
Создать структуру t_simulation_data для хранения глобальных параметров симуляции.
Создать структуру t_philosopher для представления каждого философа, включая его состояние и ресурсы (вилки).
3. Реализация функций
Обработка аргументов:
Реализовать функцию argv_processing, которая будет обрабатывать входные аргументы и инициализировать данные симуляции.
Создание философов:
Реализовать функцию philo_creator, которая будет создавать философов и инициализировать их данные.
Запуск симуляции:
Реализовать функцию philosophers, которая будет управлять запуском симуляции.
Запуск потоков:
Реализовать функцию philo_starter, которая будет запускать потоки для каждого философа.
Жизненный цикл философа:
Реализовать функцию phls_life, которая будет определять поведение философа (еда, сон, размышления).
Управление вилками:
Реализовать функции philo_takes_forks, philo_eating, и philo_sleeping для управления состояниями философа.
Проверка состояния:
Реализовать функции philo_checker и satiety_checker для проверки состояния философов.
Управление мьютексами:
Реализовать функцию mutex_destroyer для освобождения ресурсов мьютексов после завершения симуляции.
Проверка жизни:
Реализовать функцию life_checker для проверки состояния жизни философов.
4. Тестирование
Написать тесты для каждой функции, чтобы убедиться, что они работают корректно.
Проверить, что симуляция работает без взаимной блокировки и что все философы могут поесть.
5. Документация
Написать документацию по проекту, объясняющую, как использовать программу и как она работает.
Описать каждую структуру и функцию, а также их назначение.
6.  Завершение проекта
Подготовить финальную версию проекта, убедившись, что все функции работают корректно и что код хорошо структурирован.
Опубликовать проект (например, на GitHub) для доступа других разработчиков.
Эта последовательность шагов поможет организовать процесс разработки проекта, обеспечивая структурированный подход к реализации симуляции проблемы "Ужинающих философов".